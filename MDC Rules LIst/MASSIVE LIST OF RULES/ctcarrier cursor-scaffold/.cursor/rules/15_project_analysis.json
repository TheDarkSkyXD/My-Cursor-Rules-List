{
  "description": "Rules for analyzing project structure and dependencies",
  "globs": ["**/*"],
  "alwaysApply": true,
  "priority": 15,
  "triggers": ["analyze.*", "scan.*"],
  "content": "# Project Analysis Rules\n\n## Command Trigger\nWhen user types \"analyze <project_name>\":\n1. Create task directory: `.agent/state/tasks/analyze-<project_name>/`\n2. Initialize task files:\n   - plan.md (with analysis steps and timeline)\n   - questions.md (for tracking analysis questions)\n   - decisions.md (for recording analysis decisions)\n   - progress.md (for tracking analysis progress)\n   - security.md (for security-related findings)\n   - errors.md (for tracking any issues)\n3. Set as active task in `.agent/state/active.md`\n4. Begin analysis process\n\n## Task Initialization\n1. Create Task Directory\n   - Create `.agent/state/tasks/analyze-<project_name>/`\n   - Set appropriate permissions\n   - Initialize git if needed\n\n2. Initialize Task Files\n   - Create plan.md with analysis steps\n   - Create questions.md for tracking questions\n   - Create decisions.md for recording decisions\n   - Create progress.md for tracking progress\n   - Create security.md for security findings\n   - Create errors.md for tracking issues\n\n3. Set Active Task\n   - Update `.agent/state/active.md`\n   - Document task start time\n   - Set task status to 'in-progress'\n\n4. Begin Analysis\n   - Follow analysis process below\n   - Update progress regularly\n   - Document findings\n\n## Context File Updates\n### architecture.md\n- Document current system architecture\n- Include component diagrams\n- List key services and their interactions\n- Note deployment patterns\n- Update timestamp\n\n### tools.md\n- List all development tools\n- Document tool versions\n- Note tool configurations\n- Include setup instructions\n- Update timestamp\n\n### security.md\n- Document security measures\n- List known vulnerabilities\n- Note security configurations\n- Include security best practices\n- Update timestamp\n\n### principles.md\n- Document coding standards\n- List architectural principles\n- Note design patterns\n- Include best practices\n- Update timestamp\n\n## Analysis Process\n1. Project Structure Analysis\n   - Scan directory structure\n   - Identify main components\n   - Map dependencies\n   - Document architecture\n   - Update architecture.md\n\n2. Dependency Analysis\n   - List all dependencies\n   - Check versions\n   - Identify vulnerabilities\n   - Note compatibility\n   - Update tools.md\n\n3. Security Analysis\n   - Check configurations\n   - Review security settings\n   - Identify risks\n   - Note vulnerabilities\n   - Update security.md\n\n4. Code Quality Analysis\n   - Review code structure\n   - Check standards\n   - Identify issues\n   - Note improvements\n   - Update principles.md\n\n## Progress Updates\nAfter each analysis phase:\n1. Update progress.md\n2. Document findings\n3. Note any issues\n4. Update security status\n5. Check for blocking issues\n\n## Context File Format\nEach context file should follow this structure:\n```markdown\n# <File Title>\n\n## Last Updated\n- Date: <current_date>\n- Analysis Version: <version>\n\n## Current State\n<detailed current state information>\n\n## Recent Changes\n<list of recent changes>\n\n## Known Issues\n<list of known issues>\n\n## Recommendations\n<list of recommendations>\n```\n\n## Validation Steps\n1. Pre-Update Checks\n   - Verify context files exist\n   - Check file permissions\n   - Validate current format\n   - Backup existing files\n\n2. Update Process\n   - Update each file in sequence\n   - Add version tracking\n   - Include timestamps\n   - Track changes\n\n3. Post-Update Verification\n   - Verify all files updated\n   - Check for conflicts\n   - Validate cross-references\n   - Log update status\n\n## Error Handling\n1. File Access Issues\n   - Log error details\n   - Attempt backup restore\n   - Notify user\n   - Document failure\n\n2. Format Issues\n   - Preserve existing content\n   - Log format errors\n   - Suggest fixes\n   - Document issues\n\n3. Update Failures\n   - Rollback changes\n   - Preserve previous state\n   - Log failure details\n   - Create recovery plan\n\n## Consistency Checks\n1. Cross-Reference Validation\n   - Verify internal links\n   - Check external references\n   - Validate file paths\n   - Test documentation\n\n2. Content Validation\n   - Check for contradictions\n   - Verify completeness\n   - Validate accuracy\n   - Test clarity\n\n3. Format Validation\n   - Verify markdown syntax\n   - Check headings\n   - Validate lists\n   - Test code blocks"
} 