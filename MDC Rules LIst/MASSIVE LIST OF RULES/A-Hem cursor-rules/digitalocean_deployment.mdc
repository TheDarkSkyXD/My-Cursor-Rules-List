---
description: DigitalOcean deployment strategies and best practices
globs: ["**/deploy.*", "**/Dockerfile", "**/docker-compose.*", "**/.do/*"]
alwaysApply: false
---

# DigitalOcean Deployment Strategies

> For rule creation guidelines, see [Rule Creation Framework](.cursor/rules/rul3s.mdc)

## Context
DigitalOcean offers multiple deployment options for applications, each with different levels of control, complexity, and cost. This rule provides guidance on choosing the right deployment strategy and implementing best practices.

> **Get Started**: Sign up using [this referral link](https://m.do.co/c/d5a4da02539a) to receive $200 in free credit for 60 days.

## Deployment Options

### App Platform
**Best for**: Simple applications, static sites, and projects where you want to focus on code rather than infrastructure.

1. **Direct from Git**: Connect your GitHub, GitLab, or Bitbucket repository for automatic deployments
2. **Container Registry**: Deploy from DigitalOcean Container Registry or Docker Hub
3. **Configure Resources**: Choose between Basic (shared CPU) or Professional (dedicated CPU) plans based on needs
4. **Set up Auto-scaling**: Configure horizontal scaling based on CPU usage thresholds
5. **Environment Variables**: Store configuration and secrets as environment variables
6. **Custom Domains**: Configure custom domains with automatic SSL certificates
7. **Internal Services**: Use internal routing for communication between components

### Droplets (Virtual Servers)
**Best for**: Applications requiring custom configurations, specific system packages, or advanced networking.

1. **Choose the Right Size**: Start with the $10/month plan (2GB RAM) for most Node.js applications
2. **Use 1-Click Apps**: Consider using Node.js 1-Click App for faster setup
3. **Create Non-root User**: Always create and use a non-root user with sudo privileges
4. **Set Up SSH Keys**: Configure SSH keys for secure access instead of passwords
5. **Use PM2**: Install PM2 for process management to keep Node.js applications running
6. **Configure Nginx**: Set up Nginx as a reverse proxy for your Node.js application
7. **Set Up Firewall**: Configure UFW (Uncomplicated Firewall) to restrict access
8. **Implement Monitoring**: Use DigitalOcean Monitoring for alerts and performance tracking

### Kubernetes
**Best for**: Microservices architectures, complex applications requiring orchestration, and teams familiar with Kubernetes.

1. **Start Small**: Begin with a small cluster (1-3 nodes) and scale as needed
2. **Use Node Pools**: Create separate node pools for different workloads
3. **Implement Auto-scaling**: Configure horizontal pod autoscaling and cluster autoscaling
4. **Use Helm Charts**: Leverage Helm for deploying applications and managing dependencies
5. **Configure Persistent Storage**: Use DigitalOcean Volumes for persistent data
6. **Set Up Ingress**: Configure Ingress controllers for routing external traffic
7. **Implement Monitoring**: Use built-in monitoring or set up Prometheus and Grafana

## Docker Deployment Best Practices

1. **Use DigitalOcean Container Registry**: Store Docker images in DigitalOcean's private registry
2. **Implement CI/CD**: Set up GitHub Actions or GitLab CI to automate builds and deployments
3. **Use Docker Compose**: For multi-container applications, use Docker Compose for easier management
4. **Optimize Docker Images**: Create smaller, more efficient images using multi-stage builds
5. **Implement Health Checks**: Add health checks to containers for better orchestration
6. **Use Environment Variables**: Store configuration in environment variables, not in images
7. **Set Resource Limits**: Configure memory and CPU limits for containers
8. **Implement Logging**: Configure proper logging for containers to troubleshoot issues

## Database Options

1. **Managed Databases**: Use DigitalOcean Managed Databases for production workloads
2. **Database Clusters**: Set up database clusters for high availability
3. **Private Networking**: Connect to databases using private networks for better security
4. **Regular Backups**: Configure automated backups for databases
5. **Connection Pooling**: Implement connection pooling for better performance
6. **Monitoring**: Set up alerts for database performance metrics

## Networking and Security

1. **VPC Networks**: Use Virtual Private Cloud networks to isolate resources
2. **Firewalls**: Configure Cloud Firewalls to restrict access to your resources
3. **Load Balancers**: Use Load Balancers for distributing traffic across multiple instances
4. **SSL/TLS**: Configure SSL/TLS for all public-facing services
5. **Private Networking**: Use private networking for communication between services
6. **VPN Access**: Set up VPN access for secure administrative access

## Cost Optimization

1. **Right-size Resources**: Choose appropriate resource sizes for your workloads
2. **Reserved Instances**: Use reserved instances for predictable workloads
3. **Auto-scaling**: Implement auto-scaling to handle traffic spikes efficiently
4. **Monitor Usage**: Regularly review resource usage and adjust accordingly
5. **Destroy Unused Resources**: Remove unused resources to avoid unnecessary charges
6. **Use Object Storage**: Store static assets in Spaces (object storage) for cost efficiency 