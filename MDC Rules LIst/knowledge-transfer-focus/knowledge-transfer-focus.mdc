---
description: Document solutions in a way that builds team capability and understanding
globs: *
alwaysApply: true
---

<rule>
name: knowledge-transfer-focus
description: Document solutions in a way that builds team capability and understanding

filters:
  - type: event
    pattern: "documentation|knowledge_sharing"
  - type: content
    pattern: "(?i)(documentation|comment|explain|clarify)"

actions:
  - type: transform
    pattern: "^.*$"
    replacement: |
      # Implementation with Knowledge Transfer
      
      ## Code with Contextual Documentation
      
      {original_content}
      
      ## Design Decisions
      
      | Decision | Alternatives | Reasoning |
      |----------|--------------|-----------|
      | Retry mechanism with exponential backoff | Single attempt with error | Payment gateway occasionally has transient errors (5% of requests). Retries increase success rate by ~4%. |
      | Separate validation logging | Combined with general error logging | Helps security team identify potential fraud patterns separate from technical issues. |
      | Gateway selection based on amount | Always use production gateway | Test gateway has no fees but $1 limit, saving ~$150/month in processing fees for small test transactions. |
      | Event-driven notifications | Polling for status | Allows immediate updates to user and decoupling of payment processing from notification systems. |
      
      ## Maintenance Guide
      
      ### Common Modification Scenarios
      
      1. **Adding a new payment gateway provider**
         - Files to modify: `payment_gateways.py`, `gateway_factory.py`, `config.py`
         - Considerations: Implement the `PaymentGateway` interface, add credential management, update gateway selection logic
         
      2. **Modifying validation rules**
         - Files to modify: `payment_validator.py`, `validation_rules.py`
         - Considerations: Update tests first, ensure backward compatibility with saved payment methods
      
      3. **Changing retry behavior**
         - Files to modify: `process_payment.py`, `config.py`
         - Considerations: Consider impact on user experience, gateway rate limits, and transaction timing
      
      ### Troubleshooting
      
      | Symptom | Likely Cause | Resolution |
      |---------|--------------|------------|
      | High rate of "Gateway timeout" errors | Gateway API performance degradation | Check gateway status, temporarily increase timeout, consider fallback gateway |
      | Increase in validation failures | New card BIN range or rule change | Update validation rules, check for potential fraud patterns |
      | Duplicate transactions | Retry logic issue or client double-submission | Check transaction IDs, implement idempotency keys |
      | Transaction recorded but customer not notified | Event system failure | Check event logs, manually trigger notifications, verify event subscriber health |

  - type: suggest
    message: |
      For effective knowledge transfer:
      
      1. Document "why" not just "what" in your code
      2. Explain key design decisions and alternatives considered
      3. Create a maintenance guide for common modification scenarios
      4. Include troubleshooting information for likely issues
      5. Use clear, concise language that new team members can understand

examples:
  - input: |
      Here's my implementation of the payment processing module.
      
      ```python
      def process_payment(payment_details, amount):
          # Validate payment details
          if not validate_payment_details(payment_details):
              return {'success': False, 'error': 'Invalid payment details'}
              
          # Process the payment with the payment gateway
          response = payment_gateway.charge(payment_details, amount)
          
          # Handle the response
          if response.status == 'success':
              save_transaction(response.transaction_id, payment_details, amount)
              return {'success': True, 'transaction_id': response.transaction_id}
          else:
              log_error(response.error_code, payment_details, amount)
              return {'success': False, 'error': response.error_message}
      ```
    output: |
      # Implementation with Knowledge Transfer
      
      ## Code with Contextual Documentation
      
      ```python
      def process_payment(payment_details, amount):
          """
          Process a payment through our payment gateway.
          
          This function handles the complete payment flow:
          1. Validates the payment details structure and content
          2. Submits the charge to our payment gateway
          3. Records successful transactions in our database
          4. Handles errors with appropriate logging
          
          The payment gateway has a 3-second timeout and may occasionally
          return transient errors that can be safely retried.
          
          Args:
              payment_details (dict): Contains card_number, expiry, cvv, and billing_address
              amount (decimal): The amount to charge in dollars (decimal)
              
          Returns:
              dict: Result with {'success': bool} and either 'transaction_id' or 'error'
          """
          # Validate payment details - using full validation to prevent fraud
          # This includes Luhn algorithm check for card numbers
          if not validate_payment_details(payment_details):
              log_validation_failure(payment_details)  # Log for fraud analysis
              return {'success': False, 'error': 'Invalid payment details'}
              
          # We use a retry mechanism for transient gateway errors
          # Maximum 3 attempts with exponential backoff
          for attempt in range(MAX_PAYMENT_RETRIES):
              try:
                  # Process the payment with the payment gateway
                  # We use the production gateway for amounts >= $1
                  gateway = get_appropriate_payment_gateway(amount)
                  response = gateway.charge(payment_details, amount)
                  
                  # Handle the response
                  if response.status == 'success':
                      # Save transaction with DB transaction to ensure data consistency
                      save_transaction(response.transaction_id, payment_details, amount)
                      notify_payment_success(response.transaction_id)  # Trigger events
                      return {'success': True, 'transaction_id': response.transaction_id}
                  elif response.is_retriable_error():
                      # Wait before retry with exponential backoff
                      if attempt < MAX_PAYMENT_RETRIES - 1:
                          time.sleep(RETRY_BACKOFF_SECONDS * (2 ** attempt))
                          continue
                      # Fall through to error handling on last attempt
                  else:
                      # Non-retriable error
                      break
              except PaymentGatewayTimeout:
                  # Timeout errors can be retried
                  if attempt < MAX_PAYMENT_RETRIES - 1:
                      time.sleep(RETRY_BACKOFF_SECONDS * (2 ** attempt))
                      continue
          
          # If we got here, all attempts failed or we hit a non-retriable error
          log_error(response.error_code, payment_details, amount)
          alert_payment_failure(amount, response.error_code)  # Alert for large amounts
          return {'success': False, 'error': response.error_message}